/*! Checkboxes 1.2.10
 *  Copyright (c) Gyrocode (www.gyrocode.com)
 *  License: MIT License
 */
//VERSAO ANTERIOR
//(function (factory) { if (typeof define === "function" && define.amd) { define(["jquery", "datatables.net"], function ($) { return factory($, window, document); }); } else { if (typeof exports === "object") { module.exports = function (root, $) { if (!root) { root = window; } if (!$ || !$.fn.dataTable) { $ = require("datatables.net")(root, $).$; } return factory($, root, root.document); }; } else { factory(jQuery, window, document); } } }(function ($, window, document) { var DataTable = $.fn.dataTable; var Checkboxes = function (settings) { if (!DataTable.versionCheck || !DataTable.versionCheck("1.10.8")) { throw "DataTables Checkboxes requires DataTables 1.10.8 or newer"; } this.s = { dt: new DataTable.Api(settings), columns: [], data: [], dataDisabled: [], ignoreSelect: false }; this.s.ctx = this.s.dt.settings()[0]; if (this.s.ctx.checkboxes) { return; } settings.checkboxes = this; this._constructor(); }; Checkboxes.prototype = { _constructor: function () { var self = this; var dt = self.s.dt; var ctx = self.s.ctx; var hasCheckboxes = false; var hasCheckboxesSelectRow = false; var state = dt.state.loaded(); for (var i = 0; i < ctx.aoColumns.length; i++){ if (ctx.aoColumns[i].checkboxes) { var $colHeader = $(dt.column(i).header()); hasCheckboxes = true; if (!$.isPlainObject(ctx.aoColumns[i].checkboxes)) { ctx.aoColumns[i].checkboxes = {}; } ctx.aoColumns[i].checkboxes = $.extend({}, Checkboxes.defaults, ctx.aoColumns[i].checkboxes); var colOptions = { "searchable": false, "orderable": false }; if (ctx.aoColumns[i].sClass === "") { colOptions["className"] = "dt-checkboxes-cell"; } else { colOptions["className"] = ctx.aoColumns[i].sClass + " dt-checkboxes-cell"; } if (ctx.aoColumns[i].sWidthOrig === null) { colOptions["width"] = "1%"; } if (ctx.aoColumns[i].mRender === null) { colOptions["render"] = function () { return '<input type="checkbox" class="dt-checkboxes">'; }; } DataTable.ext.internal._fnColumnOptions(ctx, i, colOptions); $colHeader.removeClass("sorting"); $colHeader.off(".dt"); if (ctx.sAjaxSource === null) { var cells = dt.cells("tr", i); cells.invalidate("data"); $(cells.nodes()).addClass(colOptions["className"]); } self.s.data[i] = {}; self.s.dataDisabled[i] = {}; if (state && state.checkboxes && state.checkboxes.hasOwnProperty(i)) { if (ctx.aoColumns[i].checkboxes.stateSave) { self.s.data[i] = state.checkboxes[i]; } } self.s.columns.push(i); if (ctx.aoColumns[i].checkboxes.selectRow) { if (ctx._select) { hasCheckboxesSelectRow = true; } else { ctx.aoColumns[i].checkboxes.selectRow = false; } } if (ctx.aoColumns[i].checkboxes.selectAll) { $colHeader.data("html", $colHeader.html()); if (ctx.aoColumns[i].checkboxes.selectAllRender !== null) { var selectAllHtml = ""; if ($.isFunction(ctx.aoColumns[i].checkboxes.selectAllRender)) { selectAllHtml = ctx.aoColumns[i].checkboxes.selectAllRender(); } else { if (typeof ctx.aoColumns[i].checkboxes.selectAllRender === "string") { selectAllHtml = ctx.aoColumns[i].checkboxes.selectAllRender; } } $colHeader.html(selectAllHtml).addClass("dt-checkboxes-select-all").attr("data-col", i); } } } } if (hasCheckboxes) { var $table = $(dt.table().node()); var $tableBody = $(dt.table().body()); var $tableContainer = $(dt.table().container()); if (hasCheckboxesSelectRow) { $table.addClass("dt-checkboxes-select"); $table.on("user-select.dt.dtCheckboxes", function (e, dt, type, cell) { var cellIdx = cell.index(); var rowIdx = cellIdx.row; var colIdx = self.getSelectRowColIndex(); var cellData = dt.cell({ row: rowIdx, column: colIdx }).data(); if (!self.isCellSelectable(colIdx, cellData)) { e.preventDefault(); } }); $table.on("select.dt.dtCheckboxes deselect.dt.dtCheckboxes", function (e, api, type, indexes) { self.onSelect(e, type, indexes); }); dt.select.info(false); $table.on("draw.dt.dtCheckboxes select.dt.dtCheckboxes deselect.dt.dtCheckboxes", function () { self.showInfoSelected(); }); } $table.on("draw.dt.dtCheckboxes", function (e) { self.onDraw(e); }); $tableBody.on("click.dtCheckboxes", "input.dt-checkboxes", function (e) { self.onClick(e, this); }); $tableContainer.on("click.dtCheckboxes", 'thead th.dt-checkboxes-select-all input[type="checkbox"]', function (e) { self.onClickSelectAll(e, this); }); $tableContainer.on("click.dtCheckboxes", "thead th.dt-checkboxes-select-all", function () { $('input[type="checkbox"]', this).not(":disabled").trigger("click"); }); if (!hasCheckboxesSelectRow) { $tableContainer.on("click.dtCheckboxes", "tbody td.dt-checkboxes-cell", function () { $('input[type="checkbox"]', this).not(":disabled").trigger("click"); }); } $tableContainer.on("click.dtCheckboxes", "thead th.dt-checkboxes-select-all label, tbody td.dt-checkboxes-cell label", function (e) { e.preventDefault(); }); $(document).on("click.dtCheckboxes", '.fixedHeader-floating thead th.dt-checkboxes-select-all input[type="checkbox"]', function (e) { if (ctx._fixedHeader) { if (ctx._fixedHeader.dom["header"].floating) { self.onClickSelectAll(e, this); } } }); $(document).on("click.dtCheckboxes", ".fixedHeader-floating thead th.dt-checkboxes-select-all", function () { if (ctx._fixedHeader) { if (ctx._fixedHeader.dom["header"].floating) { $('input[type="checkbox"]', this).trigger("click"); } } }); $table.on("init.dt.dtCheckboxes", function () { if (!ctx.oFeatures.bServerSide) { if (ctx.oFeatures.bStateSave) { self.updateState(); } $table.on("xhr.dt.dtCheckboxes", function () { $.each(self.s.columns, function (index, colIdx) { self.s.data[colIdx] = {}; self.s.dataDisabled[colIdx] = {}; }); if (ctx.oFeatures.bStateSave) { var state = dt.state.loaded(); $.each(self.s.columns, function (index, colIdx) { if (state && state.checkboxes && state.checkboxes.hasOwnProperty(colIdx)) { if (ctx.aoColumns[colIdx].checkboxes.stateSave) { self.s.data[colIdx] = state.checkboxes[colIdx]; } } }); $table.one("draw.dt.dtCheckboxes", function () { self.updateState(); }); } }); } if (ctx.oFeatures.bStateSave) { $table.on("stateSaveParams.dt.dtCheckboxes", function (e, settings, data) { data.checkboxes = []; $.each(self.s.columns, function (index, colIdx) { if (ctx.aoColumns[colIdx].checkboxes.stateSave) { data.checkboxes[colIdx] = self.s.data[colIdx]; } }); }); } }); $table.one("destroy.dt.dtCheckboxes", function () { $(document).off("click.dtCheckboxes"); $tableContainer.on(".dtCheckboxes"); $tableBody.off(".dtCheckboxes"); $table.off(".dtCheckboxes"); self.s.data = {}; self.s.dataDisabled = {}; $(".dt-checkboxes-select-all", $table).each(function (index, el) { $(el).html($(el).data("html")).removeClass("dt-checkboxes-select-all"); }); }); } }, updateData: function (cells, colIdx, isSelected) { var self = this; var dt = self.s.dt; var ctx = self.s.ctx; if (ctx.aoColumns[colIdx].checkboxes) { var cellsData = cells.data(); cellsData.each(function (cellData) { if (isSelected) { ctx.checkboxes.s.data[colIdx][cellData] = 1; } else { delete ctx.checkboxes.s.data[colIdx][cellData]; } }); if (ctx.oFeatures.bStateSave) { if (ctx.aoColumns[colIdx].checkboxes.stateSave) { dt.state.save(); } } } }, updateSelect: function (selector, isSelected) { var self = this; var dt = self.s.dt; var ctx = self.s.ctx; if (ctx._select) { self.s.ignoreSelect = true; if (isSelected) { dt.rows(selector).select(); } else { dt.rows(selector).deselect(); } self.s.ignoreSelect = false; } }, updateCheckbox: function (cells, colIdx, isSelected) { var self = this; var ctx = self.s.ctx; var cellNodes = cells.nodes(); if (cellNodes.length) { $("input.dt-checkboxes", cellNodes).not(":disabled").prop("checked", isSelected); if ($.isFunction(ctx.aoColumns[colIdx].checkboxes.selectCallback)) { ctx.aoColumns[colIdx].checkboxes.selectCallback(cellNodes, isSelected); } } }, updateState: function () { var self = this; self.updateStateCheckboxes({ page: "all", search: "none" }); $.each(self.s.columns, function (index, colIdx) { self.updateSelectAll(colIdx); }); }, updateStateCheckboxes: function (opts) { var self = this; var dt = self.s.dt; var ctx = self.s.ctx; dt.cells("tr", self.s.columns, opts).every(function (rowIdx, colIdx) { var cellData = this.data(); var isCellSelectable = self.isCellSelectable(colIdx, cellData); if (ctx.checkboxes.s.data[colIdx].hasOwnProperty(cellData)) { self.updateCheckbox(this, colIdx, true); if (ctx.aoColumns[colIdx].checkboxes.selectRow && isCellSelectable) { self.updateSelect(rowIdx, true); } } if (!isCellSelectable) { $("input.dt-checkboxes", this.node()).prop("disabled", true); } }); }, onClick: function (e, ctrl) { var self = this; var dt = self.s.dt; var ctx = self.s.ctx; var cellSelector; var $cell = $(ctrl).closest("td"); if ($cell.parents(".DTFC_Cloned").length) { cellSelector = dt.fixedColumns().cellIndex($cell); } else { cellSelector = $cell; } var cell = dt.cell(cellSelector); var cellIdx = cell.index(); var colIdx = cellIdx.column; if (!ctx.aoColumns[colIdx].checkboxes.selectRow) { cell.checkboxes.select(ctrl.checked); e.stopPropagation(); } else { setTimeout(function () { var cellData = cell.data(); var hasData = self.s.data[colIdx].hasOwnProperty(cellData); if (hasData !== ctrl.checked) { self.updateCheckbox(cell, colIdx, hasData); self.updateSelectAll(colIdx); } }, 0); } }, onSelect: function (e, type, indexes) { var self = this; var dt = self.s.dt; if (self.s.ignoreSelect) { return; } if (type === "row") { var colIdx = self.getSelectRowColIndex(); if (colIdx !== null) { var cells = dt.cells(indexes, colIdx); self.updateData(cells, colIdx, (e.type === "select") ? true : false); self.updateCheckbox(cells, colIdx, (e.type === "select") ? true : false); self.updateSelectAll(colIdx); } } }, onClickSelectAll: function (e, ctrl) { var self = this; var dt = self.s.dt; var ctx = self.s.ctx; var colIdx = null; var $th = $(ctrl).closest("th"); if ($th.parents(".DTFC_Cloned").length) { var cellIdx = dt.fixedColumns().cellIndex($th); colIdx = cellIdx.column; } else { colIdx = dt.column($th).index(); } $(ctrl).data("is-changed", true); dt.column(colIdx, { page: ((ctx.aoColumns[colIdx].checkboxes && ctx.aoColumns[colIdx].checkboxes.selectAllPages) ? "all" : "current"), search: "applied" }).checkboxes.select(ctrl.checked); e.stopPropagation(); }, onDraw: function () { var self = this; var ctx = self.s.ctx; if (ctx.oFeatures.bServerSide || ctx.oFeatures.bDeferRender) { self.updateStateCheckboxes({ page: "current", search: "none" }); } $.each(self.s.columns, function (index, colIdx) { self.updateSelectAll(colIdx); }); }, updateSelectAll: function (colIdx) { var self = this; var dt = self.s.dt; var ctx = self.s.ctx; if (ctx.aoColumns[colIdx].checkboxes && ctx.aoColumns[colIdx].checkboxes.selectAll) { var cells = dt.cells("tr", colIdx, { page: ((ctx.aoColumns[colIdx].checkboxes.selectAllPages) ? "all" : "current"), search: "applied" }); var $tableContainer = dt.table().container(); var $checkboxesSelectAll = $('.dt-checkboxes-select-all[data-col="' + colIdx + '"] input[type="checkbox"]', $tableContainer); var countChecked = 0; var countDisabled = 0; var cellsData = cells.data(); $.each(cellsData, function (index, cellData) { if (self.isCellSelectable(colIdx, cellData)) { if (self.s.data[colIdx].hasOwnProperty(cellData)) { countChecked++; } } else { countDisabled++; } }); if (ctx._fixedHeader) { if (ctx._fixedHeader.dom["header"].floating) { $checkboxesSelectAll = $('.fixedHeader-floating .dt-checkboxes-select-all[data-col="' + colIdx + '"] input[type="checkbox"]'); } } var isSelected; var isIndeterminate; if (countChecked === 0) { isSelected = false; isIndeterminate = false; } else { if ((countChecked + countDisabled) === cellsData.length) { isSelected = true; isIndeterminate = false; } else { isSelected = true; isIndeterminate = true; } } var isChanged = $checkboxesSelectAll.data("is-changed"); var isSelectedNow = $checkboxesSelectAll.prop("checked"); var isIndeterminateNow = $checkboxesSelectAll.prop("indeterminate"); if (isChanged || isSelectedNow !== isSelected || isIndeterminateNow !== isIndeterminate) { $checkboxesSelectAll.data("is-changed", false); $checkboxesSelectAll.prop({ "checked": isSelected, "indeterminate": isIndeterminate }); if ($.isFunction(ctx.aoColumns[colIdx].checkboxes.selectAllCallback)) { ctx.aoColumns[colIdx].checkboxes.selectAllCallback($checkboxesSelectAll.closest("th").get(0), isSelected, isIndeterminate); } } } }, showInfoSelected: function () { var self = this; var dt = self.s.dt; var ctx = self.s.ctx; if (!ctx.aanFeatures.i) { return; } var $output = $('<span class="select-info"/>'); var add = function (name, num) { $output.append($('<span class="select-item"/>').append(dt.i18n("select." + name + "s", { _: "%d " + name + "s selected", 0: "", 1: "1 " + name + " selected" }, num))); }; var colIdx = self.getSelectRowColIndex(); if (colIdx !== null) { var countRows = 0; for (var cellData in ctx.checkboxes.s.data[colIdx]) { if (ctx.checkboxes.s.data[colIdx].hasOwnProperty(cellData)) { countRows++; } } add("row", countRows); $.each(ctx.aanFeatures.i, function (i, el) { var $el = $(el); var $existing = $el.children("span.select-info"); if ($existing.length) { $existing.remove(); } if ($output.text() !== "") { $el.append($output); } }); } }, isCellSelectable: function (colIdx, cellData) { var self = this; var ctx = self.s.ctx; if (ctx.checkboxes.s.dataDisabled[colIdx].hasOwnProperty(cellData)) { return false; } else { return true; } }, getCellIndex: function (cell) { var self = this; var dt = self.s.dt; var ctx = self.s.ctx; if (ctx._oFixedColumns) { return dt.fixedColumns().cellIndex(cell); } else { return dt.cell(cell).index(); } }, getSelectRowColIndex: function () { var self = this; var ctx = self.s.ctx; var colIdx = null; for (var i = 0; i < ctx.aoColumns.length; i++){ if (ctx.aoColumns[i].checkboxes && ctx.aoColumns[i].checkboxes.selectRow) { colIdx = i; break; } } return colIdx; }, updateFixedColumn: function (colIdx) { var self = this; var dt = self.s.dt; var ctx = self.s.ctx; if (ctx._oFixedColumns) { var leftCols = ctx._oFixedColumns.s.iLeftColumns; var rightCols = ctx.aoColumns.length - ctx._oFixedColumns.s.iRightColumns - 1; if (colIdx < leftCols || colIdx > rightCols) { dt.fixedColumns().update(); } } } }; Checkboxes.defaults = { stateSave: true, selectRow: false, selectAll: true, selectAllPages: true, selectCallback: null, selectAllCallback: null, selectAllRender: '<input type="checkbox">' }; var Api = $.fn.dataTable.Api; Api.register("checkboxes()", function () { return this; }); Api.registerPlural("columns().checkboxes.select()", "column().checkboxes.select()", function (state) { if (typeof state === "undefined") { state = true; } return this.iterator("column-rows", function (ctx, colIdx, i, j, rowsIdx) { if (ctx.aoColumns[colIdx].checkboxes) { var selector = []; $.each(rowsIdx, function (index, rowIdx) { selector.push({ row: rowIdx, column: colIdx }); }); var cells = this.cells(selector); var cellsData = cells.data(); var rowsSelectableIdx = []; selector = []; $.each(cellsData, function (index, cellData) { if (ctx.checkboxes.isCellSelectable(colIdx, cellData)) { selector.push({ row: rowsIdx[index], column: colIdx }); rowsSelectableIdx.push(rowsIdx[index]); } }); cells = this.cells(selector); ctx.checkboxes.updateData(cells, colIdx, state); ctx.checkboxes.updateCheckbox(cells, colIdx, state); if (ctx.aoColumns[colIdx].checkboxes.selectRow) { ctx.checkboxes.updateSelect(rowsSelectableIdx, state); } if (ctx._oFixedColumns) { setTimeout(function () { ctx.checkboxes.updateSelectAll(colIdx); }, 0); } else { ctx.checkboxes.updateSelectAll(colIdx); } ctx.checkboxes.updateFixedColumn(colIdx); } }, 1); }); Api.registerPlural("cells().checkboxes.select()", "cell().checkboxes.select()", function (state) { if (typeof state === "undefined") { state = true; } return this.iterator("cell", function (ctx, rowIdx, colIdx) { if (ctx.aoColumns[colIdx].checkboxes) { var cells = this.cells([{ row: rowIdx, column: colIdx }]); var cellData = this.cell({ row: rowIdx, column: colIdx }).data(); if (ctx.checkboxes.isCellSelectable(colIdx, cellData)) { ctx.checkboxes.updateData(cells, colIdx, state); ctx.checkboxes.updateCheckbox(cells, colIdx, state); if (ctx.aoColumns[colIdx].checkboxes.selectRow) { ctx.checkboxes.updateSelect(rowIdx, state); } if (ctx._oFixedColumns) { setTimeout(function () { ctx.checkboxes.updateSelectAll(colIdx); }, 0); } else { ctx.checkboxes.updateSelectAll(colIdx); } ctx.checkboxes.updateFixedColumn(colIdx); } } }, 1); }); Api.registerPlural("cells().checkboxes.enable()", "cell().checkboxes.enable()", function (state) { if (typeof state === "undefined") { state = true; } return this.iterator("cell", function (ctx, rowIdx, colIdx) { if (ctx.aoColumns[colIdx].checkboxes) { var cell = this.cell({ row: rowIdx, column: colIdx }); var cellData = cell.data(); if (state) { delete ctx.checkboxes.s.dataDisabled[colIdx][cellData]; } else { ctx.checkboxes.s.dataDisabled[colIdx][cellData] = 1; } var cellNode = cell.node(); if (cellNode) { $("input.dt-checkboxes", cellNode).prop("disabled", !state); } if (ctx.aoColumns[colIdx].checkboxes.selectRow) { if (ctx.checkboxes.s.data[colIdx].hasOwnProperty(cellData)) { ctx.checkboxes.updateSelect(rowIdx, state); } } } }, 1); }); Api.registerPlural("cells().checkboxes.disable()", "cell().checkboxes.disable()", function (state) { if (typeof state === "undefined") { state = true; } return this.checkboxes.enable(!state); }); Api.registerPlural("columns().checkboxes.deselect()", "column().checkboxes.deselect()", function (state) { if (typeof state === "undefined") { state = true; } return this.checkboxes.select(!state); }); Api.registerPlural("cells().checkboxes.deselect()", "cell().checkboxes.deselect()", function (state) { if (typeof state === "undefined") { state = true; } return this.checkboxes.select(!state); }); Api.registerPlural("columns().checkboxes.deselectAll()", "column().checkboxes.deselectAll()", function () { return this.iterator("column", function (ctx, colIdx) { if (ctx.aoColumns[colIdx].checkboxes) { ctx.checkboxes.s.data[colIdx] = {}; this.column(colIdx).checkboxes.select(false); } }, 1); }); Api.registerPlural("columns().checkboxes.selected()", "column().checkboxes.selected()", function () { return this.iterator("column-rows", function (ctx, colIdx, i, j, rowsIdx) { if (ctx.aoColumns[colIdx].checkboxes) { var selector = []; $.each(rowsIdx, function (index, rowIdx) { selector.push({ row: rowIdx, column: colIdx }); }); var cells = this.cells(selector); var cellsData = cells.data(); var data = []; $.each(cellsData, function (index, cellData) { if (ctx.checkboxes.s.data[colIdx].hasOwnProperty(cellData)) { if (ctx.checkboxes.isCellSelectable(colIdx, cellData)) { data.push(cellData); } } }); return data; } else { return []; } }, 1); }); Checkboxes.version = "1.2.10"; $.fn.DataTable.Checkboxes = Checkboxes; $.fn.dataTable.Checkboxes = Checkboxes; $(document).on("preInit.dt.dtCheckboxes", function (e, settings) { if (e.namespace !== "dt") { return; } new Checkboxes(settings); }); return Checkboxes; }));

/*! jQuery DataTables Checkboxes v1.2.13-dev - www.gyrocode.com/projects/jquery-datatables-checkboxes/ - License: MIT - Author: Gyrocode LLC / www.gyrocode.com */
!function (c) { "function" == typeof define && define.amd ? define(["jquery", "datatables.net"], function (e) { return c(e, window, document) }) : "object" == typeof exports ? module.exports = function (e, t) { return e = e || window, t && t.fn.dataTable || (t = require("datatables.net")(e, t).$), c(t, 0, e.document) } : c(jQuery, window, document) }(function (k, e, b) { "use strict"; function x(e) { if (!p.versionCheck || !p.versionCheck("1.10.8")) throw "DataTables Checkboxes requires DataTables 1.10.8 or newer"; this.s = { dt: new p.Api(e), columns: [], data: {}, dataDisabled: {}, ignoreSelect: !1 }, this.s.ctx = this.s.dt.settings()[0], this.s.ctx.checkboxes || (e.checkboxes = this)._constructor() } var p = k.fn.dataTable; x.prototype = { _constructor: function () { for (var e, t, c, s, o, l, a, n = this, d = n.s.dt, i = n.s.ctx, h = !1, u = !1, r = 0; r < i.aoColumns.length; r++) { i.aoColumns[r].checkboxes && (e = k(d.column(r).header()), h = !0, k.isPlainObject(i.aoColumns[r].checkboxes) || (i.aoColumns[r].checkboxes = {}), i.aoColumns[r].checkboxes = k.extend({}, x.defaults, i.aoColumns[r].checkboxes), t = { searchable: !1, orderable: !1 }, "" === i.aoColumns[r].sClass ? t.className = "dt-checkboxes-cell" : t.className = i.aoColumns[r].sClass + " dt-checkboxes-cell", null === i.aoColumns[r].sWidthOrig && (t.width = "1%"), null === i.aoColumns[r].mRender && (t.render = function () { return '<input type="checkbox" class="dt-checkboxes" autocomplete="off">' }), p.ext.internal._fnColumnOptions(i, r, t), e.removeClass("sorting"), e.off(".dt"), null === i.sAjaxSource && ((c = d.cells("tr", r)).invalidate("data"), k(c.nodes()).addClass(t.className)), n.s.data[r] = {}, n.s.dataDisabled[r] = {}, n.s.columns.push(r), i.aoColumns[r].checkboxes.selectRow && (i._select ? u = !0 : i.aoColumns[r].checkboxes.selectRow = !1), i.aoColumns[r].checkboxes.selectAll && (e.data("html", e.html()), null !== i.aoColumns[r].checkboxes.selectAllRender && (s = "", k.isFunction(i.aoColumns[r].checkboxes.selectAllRender) ? s = i.aoColumns[r].checkboxes.selectAllRender() : "string" == typeof i.aoColumns[r].checkboxes.selectAllRender && (s = i.aoColumns[r].checkboxes.selectAllRender), e.html(s).addClass("dt-checkboxes-select-all").attr("data-col", r)))) } h && (n.loadState(), o = k(d.table().node()), l = k(d.table().body()), a = k(d.table().container()), u && (o.addClass("dt-checkboxes-select"), o.on("user-select.dt.dtCheckboxes", function (e, t, c, s, o) { n.onDataTablesUserSelect(e, t, c, s, o) }), o.on("select.dt.dtCheckboxes deselect.dt.dtCheckboxes", function (e, t, c, s) { n.onDataTablesSelectDeselect(e, c, s) }), i._select.info && (d.select.info(!1), o.on("draw.dt.dtCheckboxes select.dt.dtCheckboxes deselect.dt.dtCheckboxes", function () { n.showInfoSelected() }))), o.on("draw.dt.dtCheckboxes", function (e) { n.onDataTablesDraw(e) }), l.on("click.dtCheckboxes", "input.dt-checkboxes", function (e) { n.onClick(e, this) }), a.on("click.dtCheckboxes", 'thead th.dt-checkboxes-select-all input[type="checkbox"]', function (e) { n.onClickSelectAll(e, this) }), a.on("click.dtCheckboxes", "thead th.dt-checkboxes-select-all", function () { k('input[type="checkbox"]', this).not(":disabled").trigger("click") }), u || a.on("click.dtCheckboxes", "tbody td.dt-checkboxes-cell", function () { k('input[type="checkbox"]', this).not(":disabled").trigger("click") }), a.on("click.dtCheckboxes", "thead th.dt-checkboxes-select-all label, tbody td.dt-checkboxes-cell label", function (e) { e.preventDefault() }), k(b).on("click.dtCheckboxes", '.fixedHeader-floating thead th.dt-checkboxes-select-all input[type="checkbox"]', function (e) { i._fixedHeader && i._fixedHeader.dom.header.floating && n.onClickSelectAll(e, this) }), k(b).on("click.dtCheckboxes", ".fixedHeader-floating thead th.dt-checkboxes-select-all", function () { i._fixedHeader && i._fixedHeader.dom.header.floating && k('input[type="checkbox"]', this).trigger("click") }), o.on("init.dt.dtCheckboxes", function () { setTimeout(function () { n.onDataTablesInit() }, 0) }), o.on("stateSaveParams.dt.dtCheckboxes", function (e, t, c) { n.onDataTablesStateSave(e, t, c) }), o.one("destroy.dt.dtCheckboxes", function (e, t) { n.onDataTablesDestroy(e, t) })) }, onDataTablesInit: function () { var o = this, e = o.s.dt, t = o.s.ctx; t.oFeatures.bServerSide || (t.oFeatures.bStateSave && o.updateState(), k(e.table().node()).on("xhr.dt.dtCheckboxes", function (e, t, c, s) { o.onDataTablesXhr(e.settings, c, s) })) }, onDataTablesUserSelect: function (e, t, c, s) { var o = s.index().row, l = this.getSelectRowColIndex(), a = t.cell({ row: o, column: l }).data(); this.isCellSelectable(l, a) || e.preventDefault() }, onDataTablesSelectDeselect: function (e, t, c) { var s, o, l = this, a = l.s.dt; l.s.ignoreSelect || "row" !== t || null !== (s = l.getSelectRowColIndex()) && (o = a.cells(c, s), l.updateData(o, s, "select" === e.type), l.updateCheckbox(o, s, "select" === e.type), l.updateSelectAll(s)) }, onDataTablesStateSave: function (e, t, c) { var s = this, o = s.s.ctx; c.checkboxes = [], k.each(s.s.columns, function (e, t) { o.aoColumns[t].checkboxes.stateSave && (c.checkboxes[t] = s.s.data[t]) }) }, onDataTablesDestroy: function () { var e = this.s.dt, t = k(e.table().node()), c = k(e.table().body()), s = k(e.table().container()); k(b).off("click.dtCheckboxes"), s.off(".dtCheckboxes"), c.off(".dtCheckboxes"), t.off(".dtCheckboxes"), this.s.data = {}, this.s.dataDisabled = {}, k(".dt-checkboxes-select-all", t).each(function (e, t) { k(t).html(k(t).data("html")).removeClass("dt-checkboxes-select-all") }) }, onDataTablesDraw: function () { var c = this, e = c.s.ctx; (e.oFeatures.bServerSide || e.oFeatures.bDeferRender) && c.updateStateCheckboxes({ page: "current", search: "none" }), k.each(c.s.columns, function (e, t) { c.updateSelectAll(t) }) }, onDataTablesXhr: function () { var c = this, e = c.s.dt, t = c.s.ctx, s = k(e.table().node()); k.each(c.s.columns, function (e, t) { c.s.data[t] = {}, c.s.dataDisabled[t] = {} }), t.oFeatures.bStateSave && (c.loadState(), s.one("draw.dt.dtCheckboxes", function () { c.updateState() })) }, updateData: function (e, t, c) { var s = this.s.dt, o = this.s.ctx; o.aoColumns[t].checkboxes && (e.data().each(function (e) { c ? o.checkboxes.s.data[t][e] = 1 : delete o.checkboxes.s.data[t][e] }), o.oFeatures.bStateSave && o.aoColumns[t].checkboxes.stateSave && s.state.save()) }, updateSelect: function (e, t) { var c = this.s.dt; this.s.ctx._select && (this.s.ignoreSelect = !0, t ? c.rows(e).select() : c.rows(e).deselect(), this.s.ignoreSelect = !1) }, updateCheckbox: function (e, t, c) { var s = this.s.ctx, o = e.nodes(); o.length && (k("input.dt-checkboxes", o).not(":disabled").prop("checked", c), k.isFunction(s.aoColumns[t].checkboxes.selectCallback) && s.aoColumns[t].checkboxes.selectCallback(o, c)) }, updateState: function () { var c = this, e = (c.s.dt, c.s.ctx); c.updateStateCheckboxes({ page: "all", search: "none" }), e._oFixedColumns && setTimeout(function () { k.each(c.s.columns, function (e, t) { c.updateSelectAll(t) }) }, 0) }, updateStateCheckboxes: function (e) { var o = this, t = o.s.dt, l = o.s.ctx; t.cells("tr", o.s.columns, e).every(function (e, t) { var c = this.data(), s = o.isCellSelectable(t, c); Object.prototype.hasOwnProperty.call(l.checkboxes.s.data, t) && Object.prototype.hasOwnProperty.call(l.checkboxes.s.data[t], c) && (l.aoColumns[t].checkboxes.selectRow && s && o.updateSelect(e, !0), o.updateCheckbox(this, t, !0)), s || k("input.dt-checkboxes", this.node()).prop("disabled", !0) }) }, onClick: function (e, c) { var s = this, t = s.s.dt, o = s.s.ctx, l = k(c).closest("td"), a = l.parents(".DTFC_Cloned").length ? t.fixedColumns().cellIndex(l) : l, n = t.cell(a), d = n.index().column; o.aoColumns[d].checkboxes.selectRow ? setTimeout(function () { var e = n.data(), t = Object.prototype.hasOwnProperty.call(s.s.data, d) && Object.prototype.hasOwnProperty.call(s.s.data[d], e); t !== c.checked && (s.updateCheckbox(n, d, t), s.updateSelectAll(d)) }, 0) : (n.checkboxes.select(c.checked), e.stopPropagation()) }, onClickSelectAll: function (e, t) { var c = this.s.dt, s = this.s.ctx, o = null, l = k(t).closest("th"); o = l.parents(".DTFC_Cloned").length ? c.fixedColumns().cellIndex(l).column : c.column(l).index(), k(t).data("is-changed", !0), c.column(o, { page: s.aoColumns[o].checkboxes && s.aoColumns[o].checkboxes.selectAllPages ? "all" : "current", search: "applied" }).checkboxes.select(t.checked), e.stopPropagation() }, loadState: function () { var c, s = this, e = s.s.dt, o = s.s.ctx; o.oFeatures.bStateSave && (c = e.state.loaded(), k.each(s.s.columns, function (e, t) { c && c.checkboxes && c.checkboxes.hasOwnProperty(t) && o.aoColumns[t].checkboxes.stateSave && (s.s.data[t] = c.checkboxes[t]) })) }, updateSelectAll: function (c) { var e, t, s, o, l, a, n, d, i, h, u, r = this, b = r.s.dt, x = r.s.ctx; x.aoColumns[c].checkboxes && x.aoColumns[c].checkboxes.selectAll && (e = b.cells("tr", c, { page: x.aoColumns[c].checkboxes.selectAllPages ? "all" : "current", search: "applied" }), t = b.table().container(), s = k('.dt-checkboxes-select-all[data-col="' + c + '"] input[type="checkbox"]', t), l = o = 0, a = e.data(), k.each(a, function (e, t) { r.isCellSelectable(c, t) ? Object.prototype.hasOwnProperty.call(r.s.data, c) && Object.prototype.hasOwnProperty.call(r.s.data[c], t) && o++ : l++ }), x._fixedHeader && x._fixedHeader.dom.header.floating && (s = k('.fixedHeader-floating .dt-checkboxes-select-all[data-col="' + c + '"] input[type="checkbox"]')), d = 0 === o ? n = !1 : o + l === a.length ? !(n = !0) : n = !0, i = s.data("is-changed"), h = s.prop("checked"), u = s.prop("indeterminate"), !i && h === n && u === d || (s.data("is-changed", !1), s.prop({ checked: !d && n, indeterminate: d }), k.isFunction(x.aoColumns[c].checkboxes.selectAllCallback) && x.aoColumns[c].checkboxes.selectAllCallback(s.closest("th").get(0), n, d))) }, showInfoSelected: function () { var n = this.s.dt, e = this.s.ctx; if (e.aanFeatures.i) { var t = this.getSelectRowColIndex(); if (null !== t) { var d = 0; for (var c in e.checkboxes.s.data[t]) Object.prototype.hasOwnProperty.call(e.checkboxes.s.data, t) && Object.prototype.hasOwnProperty.call(e.checkboxes.s.data[t], c) && d++; k.each(e.aanFeatures.i, function (e, t) { var c, s, o = k(t), l = k('<span class="select-info"/>'); c = "row", s = d, l.append(k('<span class="select-item"/>').append(n.i18n("select." + c + "s", { _: "%d " + c + "s selected", 0: "", 1: "1 " + c + " selected" }, s))); var a = o.children("span.select-info"); a.length && a.remove(), "" !== l.text() && o.append(l) }) } } }, isCellSelectable: function (e, t) { var c = this.s.ctx; return !Object.prototype.hasOwnProperty.call(c.checkboxes.s.dataDisabled, e) || !Object.prototype.hasOwnProperty.call(c.checkboxes.s.dataDisabled[e], t) }, getCellIndex: function (e) { var t = this.s.dt; return this.s.ctx._oFixedColumns ? t.fixedColumns().cellIndex(e) : t.cell(e).index() }, getSelectRowColIndex: function () { for (var e = this.s.ctx, t = null, c = 0; c < e.aoColumns.length; c++)if (e.aoColumns[c].checkboxes && e.aoColumns[c].checkboxes.selectRow) { t = c; break } return t }, updateFixedColumn: function (e) { var t, c, s = this, o = s.s.dt, l = s.s.ctx; l._oFixedColumns && (t = l._oFixedColumns.s.iLeftColumns, c = l.aoColumns.length - l._oFixedColumns.s.iRightColumns - 1, (e < t || c < e) && (o.fixedColumns().update(), setTimeout(function () { k.each(s.s.columns, function (e, t) { s.updateSelectAll(t) }) }, 0))) } }, x.defaults = { stateSave: !0, selectRow: !1, selectAll: !0, selectAllPages: !0, selectCallback: null, selectAllCallback: null, selectAllRender: '<input type="checkbox" autocomplete="off">' }; var t = k.fn.dataTable.Api; return t.register("checkboxes()", function () { return this }), t.registerPlural("columns().checkboxes.select()", "column().checkboxes.select()", function (i) { return void 0 === i && (i = !0), this.iterator("column-rows", function (c, s, e, t, o) { var l, a, n, d; c.aoColumns[s].checkboxes && (d = [], k.each(o, function (e, t) { d.push({ row: t, column: s }) }), a = (l = this.cells(d)).data(), n = [], d = [], k.each(a, function (e, t) { c.checkboxes.isCellSelectable(s, t) && (d.push({ row: o[e], column: s }), n.push(o[e])) }), l = this.cells(d), c.checkboxes.updateData(l, s, i), c.aoColumns[s].checkboxes.selectRow && c.checkboxes.updateSelect(n, i), c.checkboxes.updateCheckbox(l, s, i), c.checkboxes.updateSelectAll(s), c.checkboxes.updateFixedColumn(s)) }, 1) }), t.registerPlural("cells().checkboxes.select()", "cell().checkboxes.select()", function (l) { return void 0 === l && (l = !0), this.iterator("cell", function (e, t, c) { var s, o; e.aoColumns[c].checkboxes && (s = this.cells([{ row: t, column: c }]), o = this.cell({ row: t, column: c }).data(), e.checkboxes.isCellSelectable(c, o) && (e.checkboxes.updateData(s, c, l), e.aoColumns[c].checkboxes.selectRow && e.checkboxes.updateSelect(t, l), e.checkboxes.updateCheckbox(s, c, l), e.checkboxes.updateSelectAll(c), e.checkboxes.updateFixedColumn(c))) }, 1) }), t.registerPlural("cells().checkboxes.enable()", "cell().checkboxes.enable()", function (a) { return void 0 === a && (a = !0), this.iterator("cell", function (e, t, c) { var s, o, l; e.aoColumns[c].checkboxes && (o = (s = this.cell({ row: t, column: c })).data(), a ? delete e.checkboxes.s.dataDisabled[c][o] : e.checkboxes.s.dataDisabled[c][o] = 1, (l = s.node()) && k("input.dt-checkboxes", l).prop("disabled", !a), e.aoColumns[c].checkboxes.selectRow && Object.prototype.hasOwnProperty.call(e.checkboxes.s.data, c) && Object.prototype.hasOwnProperty.call(e.checkboxes.s.data[c], o) && e.checkboxes.updateSelect(t, a)) }, 1) }), t.registerPlural("cells().checkboxes.disable()", "cell().checkboxes.disable()", function (e) { return void 0 === e && (e = !0), this.checkboxes.enable(!e) }), t.registerPlural("columns().checkboxes.deselect()", "column().checkboxes.deselect()", function (e) { return void 0 === e && (e = !0), this.checkboxes.select(!e) }), t.registerPlural("cells().checkboxes.deselect()", "cell().checkboxes.deselect()", function (e) { return void 0 === e && (e = !0), this.checkboxes.select(!e) }), t.registerPlural("columns().checkboxes.deselectAll()", "column().checkboxes.deselectAll()", function () { return this.iterator("column", function (e, t) { e.aoColumns[t].checkboxes && (e.checkboxes.s.data[t] = {}, this.column(t).checkboxes.select(!1)) }, 1) }), t.registerPlural("columns().checkboxes.selected()", "column().checkboxes.selected()", function () { return this.iterator("column-rows", function (c, s, e, t, o) { if (c.aoColumns[s].checkboxes) { var l, a, n = []; return c.oFeatures.bServerSide ? k.each(c.checkboxes.s.data[s], function (e) { c.checkboxes.isCellSelectable(s, e) && n.push(e) }) : (l = [], k.each(o, function (e, t) { l.push({ row: t, column: s }) }), a = this.cells(l).data(), k.each(a, function (e, t) { Object.prototype.hasOwnProperty.call(c.checkboxes.s.data, s) && Object.prototype.hasOwnProperty.call(c.checkboxes.s.data[s], t) && c.checkboxes.isCellSelectable(s, t) && n.push(t) })), n } return [] }, 1) }), x.version = "1.2.13-dev", k.fn.DataTable.Checkboxes = x, k.fn.dataTable.Checkboxes = x, k(b).on("preInit.dt.dtCheckboxes", function (e, t) { "dt" === e.namespace && new x(t) }), x });
//# sourceMappingURL=dataTables.checkboxes.min.js.map